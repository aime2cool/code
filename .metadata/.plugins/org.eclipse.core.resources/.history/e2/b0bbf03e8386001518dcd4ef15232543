import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;







public class SCC {
	class Vertex {
		int val;
		List<Vertex> from;
		List<Vertex> to;
		int f;
		Vertex leader;
		boolean isVisited;
		Vertex(int value) {
			val = value;
			from = new ArrayList<Vertex>();
			to = new ArrayList<Vertex>();
			isVisited = false;
		}
		@Override
	    public int hashCode(){
	        return val;
	    }

	    @Override
	    public boolean equals(Object obj){
	    	Vertex v = (Vertex) obj;
	    	return val == v.val? true : false;
	    }
	    
	    
	}
	
	public List<Vertex> readLines(String filename) throws IOException {
		FileReader fileReader = new FileReader(filename);
		BufferedReader bufferedReader = new BufferedReader(fileReader);
		
		Map<Integer, Vertex> map = new HashMap<Integer, Vertex>();
		String line = null;
		while ((line = bufferedReader.readLine()) != null) {
			line = line.trim();
			String[] arr = line.split("\\s+");
			
			int val1 = Integer.parseInt(arr[0]);
			int val2 = Integer.parseInt(arr[1]);
			if (!map.containsKey(val1)) {
				map.put(val1, new Vertex(val1));
			}
			if (!map.containsKey(val2)) {
				map.put(val2, new Vertex(val2));
			}
			map.get(val1).to.add(map.get(val2));
			map.get(val2).from.add(map.get(val1));
			
		}
		bufferedReader.close();
		List<Vertex> graph = new ArrayList<Vertex>(map.values());
		return graph;
	}
	
	public void revDFSLoop(List<Vertex> graph) {
		int t = 0;
		
		for (Vertex v : graph) {
			if (!v.isVisited) {
				t = revDFS(graph, v, t);
			}
		}
	}
	
	private int revDFS(List<Vertex> graph, Vertex v, int t) {
		v.isVisited = true;
		for (Vertex u : v.from) {
			if (!u.isVisited) {
				t = revDFS(graph, u, t);
			}
		}
		t++;
		v.f = t;
		return t;
		
	}
	
	public List<Integer> DFSLoop(List<Vertex> graph) {
		List<Integer> scc = new ArrayList<Integer>();
		Map<Integer,Vertex> map = rename(graph);
		for (int i = graph.size(); i > 0; i--) {
			Vertex v = map.get(i);
			if (!v.isVisited) {
				int count = DFS(graph, v, v);
				scc.add(count);
			}
		}
		return scc;
	}

	private int DFS(List<Vertex> graph, Vertex v, Vertex S) {
		v.isVisited = true;
		v.leader = S;
		int count = 1;
		for (Vertex u : v.to) {
			if (!u.isVisited) {
				count += DFS(graph, u, S);
			}
		}
		return count;
	}

	private Map<Integer,Vertex> rename(List<Vertex> graph) {
		Map<Integer,Vertex> map = new HashMap<Integer,Vertex>();
		for (int i = 0; i < graph.size(); i++) {
			Vertex v = graph.get(i);
			v.isVisited = false;
			map.put(v.f, v);
		}
		return map;
		
	}

	public static void main(String[] args) throws IOException {
		SCC s = new SCC();
		List<Vertex> graph = s.readLines("C:\\Users\\yamgao.ORADEV\\Google Drive\\algorithm\\HW\\HW4\\SCC.txt");
		s.revDFSLoop(graph);
		s.DFSLoop(graph);
		
	}

}
