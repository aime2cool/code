import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
public class Inversion {
	public int[] readLines(String filename) throws IOException {
        FileReader fileReader = new FileReader(filename);
        BufferedReader bufferedReader = new BufferedReader(fileReader);
        List<Integer> lines = new ArrayList<Integer>();
        String line = null;
        while ((line = bufferedReader.readLine()) != null) {
            lines.add(Integer.parseInt(line.trim()));
        }
        bufferedReader.close();
        int[] res = new int[lines.size()];
        for (int i = 0; i < lines.size(); i++) {
        	res[i] = lines.get(i);
        }
        return res;
    }
	public int countAndSort(int[] arr, int start, int end) {
		if (start >= end) {
			return 0;
		}
		int count = 0;
		int mid = (start + end) / 2;
		count += countAndSort(arr, start, mid);
		count += countAndSort(arr, mid + 1, end);
		count += splitMergeCount(arr, start, end, mid);
		return count;
	}
	private int splitMergeCount(int[] arr, int start, int end, int mid) {
		int[] out = new int[arr.length];
		int count = 0;
		int i = start;
		int j = mid + 1;
		for (int k = 0; k < out.length; k++) {
			
				if (j == end + 1 || i <= mid && j <= end && arr[i] < arr[j]) {
					out[k] = arr[i];
					i++;
				}
				else {
					out[k] = arr[j];
					count += mid - i + 1;
					j++;
				}
			
		}
		return count;
		
	}
}
